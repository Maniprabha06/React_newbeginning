HTML PAGE:
<script src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>



REACT :
1. js library // jsx file (javascript + HTML) uses virtual dom so that the particular updated part will be reloaded not the whole page
2. instead of writing full code in javascript we use react to write simple lines of code.
3. we use jsx(javascript xml (syntax) react code will be converted into javascript full code and then it will manipulate the DOM.
4. DOM will create a tree in the structure of parent and child.
5. HTML--> body-->div>h1,p,ul -->(ul-->l1,l2,l3).    -- >  (DOM)
6. In react use curly braces for js  --> {"Prabha"}
7. objects and boolean values cannot passed in curly braces it will through error.
8. Keyword : ctrl+alt+R --> snippet (rafce)
9. rafce : will create a functional component with the name of file name 
        const Header = () => {
            const headerstyle = {backgroundColor : 'mediumblue',
            color: 'white'}
          return (
            <header style={headerstyle}>
                <h1>to do list</h1>
            </header>
          )
        }
10. CSS : https://styled-components.com/
11. useful to learn tail wind css (important)
12. we can apply inline , external, internal css in react as like html.
13. In events if we pass empty parameter it will give the result without doing that event so it is not encouraged.
14. If we pass a parameter in function call then before that we should create a ananonyms function. we can pass(e) in parameter to to get the output result as a brief of event description.
15. eg : (e) or (e.target) or (e.target.innerText).
16. Inside hooks we cannot create class.
17.Hook Rules
        There are 3 rules for hooks:
                Hooks can only be called inside React function components.
                Hooks can only be called at the top level of a component.
                Hooks cannot be conditional.cannot use conditions while using hooks.
18. const [count, setCount] = useState(99); count-->current state , setCount -->next state.
19. conat [count,setCount] = useState(99); function increament{ setCount(count+1); setCount(count+1); setCount(count+1); } -->at a time a function is called it will change the value at once cannot be changed again and again.
20. For instead of that we can use function to use it more than once like function incre{ setCount((count) => {return count+1}) setCount((count) => {return count+1}) setCount((count) => {return count+1})}.
21. In useState we should not call the function. It will call the through the output for any of the other function call too.
22. Example : const [name,setName] = useState(namee()); -->it will slow down the function.
23. Instead we can use const [name,setName] = useState(()=>namee());
24. In useState we should not use objects like useState(text:"like") bcoz while calling this function it will called like varname.text --> it will through error.
25. map , filter etc are high level function!! 
26. use npm.js.com for icons.
27. install react-icons.
28. clt+shift+p in vs code
29. react forms can also be created with initial values with the help of useState hook.
30. react has useEffect hook too.

